<?xml version="1.0" encoding="utf-8"?>
<openerp>
    <data noupdate="0">
        

        
        <!-- EQUIPOS DE VENTAS QUE COMISIONAN -->
        <record id="calculate_comissions_00" model="comission.config">
            <field name="name">Vendedor de mostrador</field>
            
        </record>


        <!-- PARAMETROS DE LAS COMISIONES -->

        <!-- VENDEDORES MOSTRADOR -->

        <record id="com_nominal_lines_mostrador_0" model="nominal.lines.model">
            <field name="nominal_ref_id" ref="calculate_comissions_00"/>
            <field name="name" >El Porcentaje se aplica al valor del total de ventas de Refacciones de la sucursal sin IVA, dividido entre el total de vendedores de mostrador de la sucursal Refacciones.</field>
            <field name="margin_percentage_initial">0.0</field>
            <field name="margin_percentage_final">0.0</field>
            <field name="percentage" >0.4</field>
            <field name="final_day" >0</field>
            <field name="general" >True</field>
            <field name="detail_comission">Comision General por la Venta de Refacciones en Sucursal</field>
            <field name="special_calculate" >True</field>
            <field name="python_code" >############### GERENTE DE SUCURSAL #############
############ FUNCION DE COMISIONES 0.4% #########
product_category = self.pool.get('product.category')

invoice_line = self.pool.get("account.invoice.line")
invoice_obj = self.pool.get('account.invoice')
user_obj = self.pool.get("res.users")

user_br = user_obj.browse(cr, uid, salesman_id, context=None)
self_br = self.browse(cr, uid, ids[0], context=None)
account_invoice_parent_ids = account_invoice_parent_ids
#invoice_ids = invoice_obj.search(cr, uid, [('company_id','=',user_br.company_id.id),('id','in',tuple(account_invoice_parent_ids))])
invoice_ids = invoice_obj.search(cr, uid, [('company_id','=',user_br.company_id.id),
                                           ('type','=','out_invoice'),
                                           ('residual','&lt;=',0.0),
                                           ('state','in',('paid','open')),
                                           ('date_payment_real','&gt;=',date_start),
                                           ('date_payment_real','&lt;=',date_end)])


category_list_ids = [x.id for x in self_br.product_category_ids]

category_parent_ids = product_category.search(cr, SUPERUSER_ID, [
                                                                    ('parent_id','in',tuple(category_list_ids))
                                                                        ])
if category_parent_ids:
    category_parent_2_ids = product_category.search(cr, SUPERUSER_ID, [
                                                    ('parent_id','in',tuple(category_parent_ids))
                                                        ])
category_list_ids = category_list_ids + category_parent_ids + category_parent_2_ids

#invoice_ids = invoice_obj.search(cr, uid, [('user_id','=',user),('id','in',tuple(account_invoice_parent_ids))])
if self_br.margin_percentage_initial == 0.0 and self_br.margin_percentage_final == 0.0:
    invoice_line_ids = invoice_line.search(cr, uid, [('invoice_id','in', tuple(invoice_ids)),
                                                    ('product_id','!=',False)])
    invoice_line_ids = invoice_line.search(cr, uid, [('id','in', tuple(invoice_line_ids)),
                                                    ('product_id.categ_id','in',tuple(category_list_ids))])
else:
    ########## SI LE PONEN MARGEN AL CALCULO ESPECIAL ENTONCES PONER EL MARGEN MINIMO
    invoice_line_ids = invoice_line.search(cr, uid, [('invoice_id','in', tuple(invoice_ids)),
                                                    ('product_id','!=',False),('margin_percentage','&gt;=',self_br.margin_percentage_initial)])
    invoice_line_ids = invoice_line.search(cr, uid, [('id','in', tuple(invoice_line_ids)),
                                                    ('product_id.categ_id','in',tuple(category_list_ids))])

subtotal = 0.0
if invoice_line_ids:
    cr.execute("select sum(price_subtotal) from account_invoice_line where id in %s" ,(tuple(invoice_line_ids),))
    subtotal = cr.fetchall()[0][0]

vendedores = user_obj.search(cr, uid, [('parameters_id','=',self_br.nominal_ref_id.id),('company_id','=',user_br.company_id.id)])

sales_number = len(vendedores)
total_comission = 0.0
if subtotal > 0.0:
    total_comission = subtotal*(self_br.percentage/100)
    ### DIVIDIDO ENTRE EL NUMERO DE VENDEDORES ###
    total_comission = total_comission/sales_number

temporal_results_nominal = self.pool.get('temporal.results.nominal')
temporal_id = temporal_results_nominal.create(cr, uid, {
                                                    'result_python_code': total_comission,
                                                    'nominal_id': self_br.id,
                                                    'date': datetime.now().strftime('%Y-%m-%d'),
                                                    'name': self_br.detail_comission,}, context=None)</field>
        </record>

        <record id="com_nominal_lines_mostrador_01" model="nominal.lines.model">
            <field name="nominal_ref_id" ref="calculate_comissions_00"/>
            <field name="name" >Mayor a 21% de Margen de Venta Equipo.</field>
            <field name="margin_percentage_initial">21</field>
            <field name="margin_percentage_final">0</field>
            <field name="percentage" >2</field>
            <field name="final_day" >0</field>
        </record>

        <record id="com_nominal_lines_mostrador_02" model="nominal.lines.model">
            <field name="nominal_ref_id" ref="calculate_comissions_00"/>
            <field name="name" >Entre 16% y 20% de Margen de Venta Equipo.</field>
            <field name="margin_percentage_initial">16</field>
            <field name="margin_percentage_final">20</field>
            <field name="percentage" >1.5</field>
            <field name="final_day" >0</field>
        </record>

        <record id="com_nominal_lines_mostrador_03" model="nominal.lines.model">
            <field name="nominal_ref_id" ref="calculate_comissions_00"/>
            <field name="name" >Entre 10% y 15% de Margen de Venta Equipo.</field>
            <field name="margin_percentage_initial">10</field>
            <field name="margin_percentage_final">15</field>
            <field name="percentage" >1</field>
            <field name="final_day" >0</field>
        </record>
    <!-- EQUIPO INGENIERO VENTA-->
        <record id="calculate_comissions_01" model="comission.config">
            <field name="name">Ingeniero de Venta</field>
            
        </record>
        <record id="com_nominal_lines_ing_01" model="nominal.lines.model">
            <field name="nominal_ref_id" ref="calculate_comissions_01"/>
            <field name="name" >Mayor a 21% de Margen de Venta Refacciones y Equipo</field>
            <field name="margin_percentage_initial">21</field>
            <field name="margin_percentage_final">0</field>
            <field name="percentage" >2</field>
            <field name="final_day" >0</field>
        </record>

        <record id="com_nominal_lines_ing_02" model="nominal.lines.model">
            <field name="nominal_ref_id" ref="calculate_comissions_01"/>
            <field name="name" >Entre 16% y 20% de Margen de Venta Refacciones y Equipo</field>
            <field name="margin_percentage_initial">16</field>
            <field name="margin_percentage_final">20</field>
            <field name="percentage" >1.5</field>
            <field name="final_day" >0</field>
        </record>

        <record id="com_nominal_lines_ing_03" model="nominal.lines.model">
            <field name="nominal_ref_id" ref="calculate_comissions_01"/>
            <field name="name" >Entre 10% y 15% de Margen de Venta Refacciones y Equipo</field>
            <field name="margin_percentage_initial">10</field>
            <field name="margin_percentage_final">15</field>
            <field name="percentage" >1</field>
            <field name="final_day" >0</field>
        </record>

    <!-- VENDEDOR EMPRESARIAL -->
        <record id="calculate_comissions_02" model="comission.config">
            <field name="name">Vendedor Empresarial</field>
            
        </record>
        <record id="com_nominal_lines_emp_01" model="nominal.lines.model">
            <field name="nominal_ref_id" ref="calculate_comissions_02"/>
            <field name="name" >Mayor a 21% de Margen de Venta Refacciones y Equipo</field>
            <field name="margin_percentage_initial">21</field>
            <field name="margin_percentage_final">0</field>
            <field name="percentage" >2</field>
            <field name="final_day" >0</field>
        </record>

        <record id="com_nominal_lines_emp_02" model="nominal.lines.model">
            <field name="nominal_ref_id" ref="calculate_comissions_02"/>
            <field name="name" >Entre 16% y 20% de Margen de Venta Refacciones y Equipo</field>
            <field name="margin_percentage_initial">16</field>
            <field name="margin_percentage_final">20</field>
            <field name="percentage" >1.5</field>
            <field name="final_day" >0</field>
        </record>

        <record id="com_nominal_lines_emp_03" model="nominal.lines.model">
            <field name="nominal_ref_id" ref="calculate_comissions_02"/>
            <field name="name" >Entre 10% y 15% de Margen de Venta Refacciones y Equipo</field>
            <field name="margin_percentage_initial">10</field>
            <field name="margin_percentage_final">15</field>
            <field name="percentage" >1</field>
            <field name="final_day" >0</field>
        </record>

    <!-- GERENTE DE SUCURSAL-->
        <record id="calculate_comissions_03" model="comission.config">
            <field name="name">Gerente de Sucursal</field>
            
        </record>

        <record id="com_nominal_lines_grnt_0" model="nominal.lines.model">
            <field name="nominal_ref_id" ref="calculate_comissions_03"/>
            <field name="name" >El Porcentaje es sobre la utilidad del total de ventas de Refacciones de la sucursal sin IVA Refacciones.</field>
            <field name="margin_percentage_initial">0.0</field>
            <field name="margin_percentage_final">0.0</field>
            <field name="percentage" >4.0</field>
            <field name="final_day" >0</field>
            <field name="general" >True</field>
            <field name="detail_comission">Comision General por la Venta de Refacciones en Sucursal</field>
            <field name="special_calculate" >True</field>
            <field name="python_code" >############### GERENTE DE SUCURSAL #############
############ FUNCION DE COMISIONES 0.4% #########
product_category = self.pool.get('product.category')

invoice_line = self.pool.get("account.invoice.line")
invoice_obj = self.pool.get('account.invoice')
user_obj = self.pool.get("res.users")

user_br = user_obj.browse(cr, uid, salesman_id, context=None)
self_br = self.browse(cr, uid, ids[0], context=None)
account_invoice_parent_ids = account_invoice_parent_ids
#invoice_ids = invoice_obj.search(cr, uid, [('company_id','=',user_br.company_id.id),('id','in',tuple(account_invoice_parent_ids))])
invoice_ids = invoice_obj.search(cr, uid, [('company_id','=',user_br.company_id.id),
                                           ('type','=','out_invoice'),
                                           ('residual','&lt;=',0.0),
                                           ('state','in',('paid','open')),
                                           ('date_payment_real','&gt;=',date_start),
                                           ('date_payment_real','&lt;=',date_end)])


category_list_ids = [x.id for x in self_br.product_category_ids]

category_parent_ids = product_category.search(cr, SUPERUSER_ID, [
                                                                    ('parent_id','in',tuple(category_list_ids))
                                                                        ])
if category_parent_ids:
    category_parent_2_ids = product_category.search(cr, SUPERUSER_ID, [
                                                    ('parent_id','in',tuple(category_parent_ids))
                                                        ])
category_list_ids = category_list_ids + category_parent_ids + category_parent_2_ids

#invoice_ids = invoice_obj.search(cr, uid, [('user_id','=',user),('id','in',tuple(account_invoice_parent_ids))])
if self_br.margin_percentage_initial == 0.0 and self_br.margin_percentage_final == 0.0:
    invoice_line_ids = invoice_line.search(cr, uid, [('invoice_id','in', tuple(invoice_ids)),
                                                    ('product_id','!=',False)])
    invoice_line_ids = invoice_line.search(cr, uid, [('id','in', tuple(invoice_line_ids)),
                                                    ('product_id.categ_id','in',tuple(category_list_ids))])
else:
    ########## SI LE PONEN MARGEN AL CALCULO ESPECIAL ENTONCES PONER EL MARGEN MINIMO
    invoice_line_ids = invoice_line.search(cr, uid, [('invoice_id','in', tuple(invoice_ids)),
                                                    ('product_id','!=',False),('margin_percentage','&gt;=',self_br.margin_percentage_initial)])
    invoice_line_ids = invoice_line.search(cr, uid, [('id','in', tuple(invoice_line_ids)),
                                                    ('product_id.categ_id','in',tuple(category_list_ids))])

subtotal = 0.0
if invoice_line_ids:
    cr.execute("select sum(price_subtotal) from account_invoice_line where id in %s" ,(tuple(invoice_line_ids),))
    subtotal = cr.fetchall()[0][0]

vendedores = user_obj.search(cr, uid, [('parameters_id','=',self_br.nominal_ref_id.id)])

sales_number = len(vendedores)
total_comission = 0.0
if subtotal > 0.0:
    total_comission = subtotal*(self_br.percentage/100)

temporal_results_nominal = self.pool.get('temporal.results.nominal')
temporal_id = temporal_results_nominal.create(cr, uid, {
                                                    'result_python_code': total_comission,
                                                    'nominal_id': self_br.id,
                                                    'date': datetime.now().strftime('%Y-%m-%d'),
                                                    'name': self_br.detail_comission,}, context=None)</field>
        </record>

        <record id="com_nominal_lines_grnt_01" model="nominal.lines.model">
            <field name="nominal_ref_id" ref="calculate_comissions_03"/>
            <field name="name" >El Porcentaje es sobre la utilidad del total de ventas de Refacciones de la sucursal sin IVA Equipo.</field>
            <field name="margin_percentage_initial">0.0</field>
            <field name="margin_percentage_final">0.0</field>
            <field name="percentage" >4.0</field>
            <field name="final_day" >0</field>
            <field name="general" >True</field>
            <field name="detail_comission">Comision General por la Venta de Equipo en Sucursal</field>
            <field name="special_calculate" >True</field>
            <field name="python_code" >############### GERENTE DE SUCURSAL #############
############ FUNCION DE COMISIONES 0.4% #########
product_category = self.pool.get('product.category')

invoice_line = self.pool.get("account.invoice.line")
invoice_obj = self.pool.get('account.invoice')
user_obj = self.pool.get("res.users")

user_br = user_obj.browse(cr, uid, salesman_id, context=None)
self_br = self.browse(cr, uid, ids[0], context=None)
account_invoice_parent_ids = account_invoice_parent_ids
#invoice_ids = invoice_obj.search(cr, uid, [('company_id','=',user_br.company_id.id),('id','in',tuple(account_invoice_parent_ids))])
invoice_ids = invoice_obj.search(cr, uid, [('company_id','=',user_br.company_id.id),
                                           ('type','=','out_invoice'),
                                           ('residual','&lt;=',0.0),
                                           ('state','in',('paid','open')),
                                           ('date_payment_real','&gt;=',date_start),
                                           ('date_payment_real','&lt;=',date_end)])


category_list_ids = [x.id for x in self_br.product_category_ids]

category_parent_ids = product_category.search(cr, SUPERUSER_ID, [
                                                                    ('parent_id','in',tuple(category_list_ids))
                                                                        ])
if category_parent_ids:
    category_parent_2_ids = product_category.search(cr, SUPERUSER_ID, [
                                                    ('parent_id','in',tuple(category_parent_ids))
                                                        ])
category_list_ids = category_list_ids + category_parent_ids + category_parent_2_ids

#invoice_ids = invoice_obj.search(cr, uid, [('user_id','=',user),('id','in',tuple(account_invoice_parent_ids))])
if self_br.margin_percentage_initial == 0.0 and self_br.margin_percentage_final == 0.0:
    invoice_line_ids = invoice_line.search(cr, uid, [('invoice_id','in', tuple(invoice_ids)),
                                                    ('product_id','!=',False)])
    invoice_line_ids = invoice_line.search(cr, uid, [('id','in', tuple(invoice_line_ids)),
                                                    ('product_id.categ_id','in',tuple(category_list_ids))])
else:
    ########## SI LE PONEN MARGEN AL CALCULO ESPECIAL ENTONCES PONER EL MARGEN MINIMO
    invoice_line_ids = invoice_line.search(cr, uid, [('invoice_id','in', tuple(invoice_ids)),
                                                    ('product_id','!=',False),('margin_percentage','&gt;=',self_br.margin_percentage_initial)])
    invoice_line_ids = invoice_line.search(cr, uid, [('id','in', tuple(invoice_line_ids)),
                                                    ('product_id.categ_id','in',tuple(category_list_ids))])

subtotal = 0.0
if invoice_line_ids:
    cr.execute("select sum(price_subtotal) from account_invoice_line where id in %s" ,(tuple(invoice_line_ids),))
    subtotal = cr.fetchall()[0][0]

vendedores = user_obj.search(cr, uid, [('parameters_id','=',self_br.nominal_ref_id.id)])

sales_number = len(vendedores)
total_comission = 0.0
if subtotal > 0.0:
    total_comission = subtotal*(self_br.percentage/100)

temporal_results_nominal = self.pool.get('temporal.results.nominal')
temporal_id = temporal_results_nominal.create(cr, uid, {
                                                    'result_python_code': total_comission,
                                                    'nominal_id': self_br.id,
                                                    'date': datetime.now().strftime('%Y-%m-%d'),
                                                    'name': self_br.detail_comission,}, context=None)</field>
        </record>

    <!-- GERENTE DE DIVISION -->

        <record id="calculate_comissions_04" model="comission.config">
            <field name="name">Gerente de Division</field>
            
        </record>

        <record id="com_nominal_lines_divs_0" model="nominal.lines.model">
            <field name="nominal_ref_id" ref="calculate_comissions_04"/>
            <field name="name" >El Porcentaje es sobre el total de ventas de Refacciones de sucursales TyP sin IVA Refacciones.</field>
            <field name="margin_percentage_initial">0.0</field>
            <field name="margin_percentage_final">0.0</field>
            <field name="percentage" >0.5</field>
            <field name="final_day" >0</field>
            <field name="general" >True</field>
            <field name="detail_comission">Comision General por la Venta de Refacciones en Sucursales de TYP</field>
            <field name="special_calculate" >True</field>
            <field name="python_code" >############### GERENTE DE SUCURSAL #############
############ FUNCION DE COMISIONES 0.4% #########
product_category = self.pool.get('product.category')

invoice_line = self.pool.get("account.invoice.line")
invoice_obj = self.pool.get('account.invoice')
user_obj = self.pool.get("res.users")

user_br = user_obj.browse(cr, uid, salesman_id, context=None)
self_br = self.browse(cr, uid, ids[0], context=None)
account_invoice_parent_ids = account_invoice_parent_ids
company_ids = []

if self_br.nominal_ref_id.company_nominal_ids:
    company_ids = [x.id for x in self_br.nominal_ref_id.company_nominal_ids]

###################### COMPANYS IDS >>>>>> company_ids

#invoice_ids = invoice_obj.search(cr, uid, [('company_id','=',user_br.company_id.id),('id','in',tuple(account_invoice_parent_ids))])
invoice_ids = invoice_obj.search(cr, uid, [('company_id','in',tuple(company_ids)),
                                           ('type','=','out_invoice'),
                                           ('residual','&lt;=',0.0),
                                           ('state','in',('paid','open')),
                                           ('date_payment_real','&gt;=',date_start),
                                           ('date_payment_real','&lt;=',date_end)])


category_list_ids = [x.id for x in self_br.product_category_ids]

category_parent_ids = product_category.search(cr, SUPERUSER_ID, [
                                                                    ('parent_id','in',tuple(category_list_ids))
                                                                        ])
if category_parent_ids:
    category_parent_2_ids = product_category.search(cr, SUPERUSER_ID, [
                                                    ('parent_id','in',tuple(category_parent_ids))
                                                        ])
category_list_ids = category_list_ids + category_parent_ids + category_parent_2_ids

#invoice_ids = invoice_obj.search(cr, uid, [('user_id','=',user),('id','in',tuple(account_invoice_parent_ids))])
if self_br.margin_percentage_initial == 0.0 and self_br.margin_percentage_final == 0.0:
    invoice_line_ids = invoice_line.search(cr, uid, [('invoice_id','in', tuple(invoice_ids)),
                                                    ('product_id','!=',False)])
    invoice_line_ids = invoice_line.search(cr, uid, [('id','in', tuple(invoice_line_ids)),
                                                    ('product_id.categ_id','in',tuple(category_list_ids))])
else:
    ########## SI LE PONEN MARGEN AL CALCULO ESPECIAL ENTONCES PONER EL MARGEN MINIMO
    invoice_line_ids = invoice_line.search(cr, uid, [('invoice_id','in', tuple(invoice_ids)),
                                                    ('product_id','!=',False),('margin_percentage','&gt;=',self_br.margin_percentage_initial)])
    invoice_line_ids = invoice_line.search(cr, uid, [('id','in', tuple(invoice_line_ids)),
                                                    ('product_id.categ_id','in',tuple(category_list_ids))])

subtotal = 0.0
if invoice_line_ids:
    cr.execute("select sum(price_subtotal) from account_invoice_line where id in %s" ,(tuple(invoice_line_ids),))
    subtotal = cr.fetchall()[0][0]

vendedores = user_obj.search(cr, uid, [('parameters_id','=',self_br.nominal_ref_id.id)])

sales_number = len(vendedores)
total_comission = 0.0
if subtotal > 0.0:
    total_comission = subtotal*(self_br.percentage/100)

temporal_results_nominal = self.pool.get('temporal.results.nominal')
temporal_id = temporal_results_nominal.create(cr, uid, {
                                                    'result_python_code': total_comission,
                                                    'nominal_id': self_br.id,
                                                    'date': datetime.now().strftime('%Y-%m-%d'),
                                                    'name': self_br.detail_comission,}, context=None)</field>
        </record>

        <record id="com_nominal_lines_divs_01" model="nominal.lines.model">
            <field name="nominal_ref_id" ref="calculate_comissions_04"/>
            <field name="name" >El Porcentaje es sobre el total de ventas de Aire Acondicionado de sucursales y Cedis TyP sin IVA Aire Acondicionado.</field>
            <field name="margin_percentage_initial">0.0</field>
            <field name="margin_percentage_final">0.0</field>
            <field name="percentage" >0.5</field>
            <field name="final_day" >0</field>
            <field name="general" >True</field>
            <field name="detail_comission">Comision General por la Venta de Aire Acondicionado en Sucursales y Cedis de TyP</field>
            <field name="special_calculate" >True</field>
            <field name="python_code" >############### GERENTE DE SUCURSAL #############
############ FUNCION DE COMISIONES 0.4% #########
product_category = self.pool.get('product.category')

invoice_line = self.pool.get("account.invoice.line")
invoice_obj = self.pool.get('account.invoice')
user_obj = self.pool.get("res.users")

user_br = user_obj.browse(cr, uid, salesman_id, context=None)
self_br = self.browse(cr, uid, ids[0], context=None)
account_invoice_parent_ids = account_invoice_parent_ids
company_ids = []

if self_br.nominal_ref_id.company_nominal_ids:
    company_ids = [x.id for x in self_br.nominal_ref_id.company_nominal_ids]

###################### COMPANYS IDS >>>>>> company_ids

#invoice_ids = invoice_obj.search(cr, uid, [('company_id','=',user_br.company_id.id),('id','in',tuple(account_invoice_parent_ids))])
invoice_ids = invoice_obj.search(cr, uid, [('company_id','in',tuple(company_ids)),
                                           ('type','=','out_invoice'),
                                           ('residual','&lt;=',0.0),
                                           ('state','in',('paid','open')),
                                           ('date_payment_real','&gt;=',date_start),
                                           ('date_payment_real','&lt;=',date_end)])


category_list_ids = [x.id for x in self_br.product_category_ids]

category_parent_ids = product_category.search(cr, SUPERUSER_ID, [
                                                                    ('parent_id','in',tuple(category_list_ids))
                                                                        ])
if category_parent_ids:
    category_parent_2_ids = product_category.search(cr, SUPERUSER_ID, [
                                                    ('parent_id','in',tuple(category_parent_ids))
                                                        ])
category_list_ids = category_list_ids + category_parent_ids + category_parent_2_ids

#invoice_ids = invoice_obj.search(cr, uid, [('user_id','=',user),('id','in',tuple(account_invoice_parent_ids))])
if self_br.margin_percentage_initial == 0.0 and self_br.margin_percentage_final == 0.0:
    invoice_line_ids = invoice_line.search(cr, uid, [('invoice_id','in', tuple(invoice_ids)),
                                                    ('product_id','!=',False)])
    invoice_line_ids = invoice_line.search(cr, uid, [('id','in', tuple(invoice_line_ids)),
                                                    ('product_id.categ_id','in',tuple(category_list_ids))])
else:
    ########## SI LE PONEN MARGEN AL CALCULO ESPECIAL ENTONCES PONER EL MARGEN MINIMO
    invoice_line_ids = invoice_line.search(cr, uid, [('invoice_id','in', tuple(invoice_ids)),
                                                    ('product_id','!=',False),('margin_percentage','&gt;=',self_br.margin_percentage_initial)])
    invoice_line_ids = invoice_line.search(cr, uid, [('id','in', tuple(invoice_line_ids)),
                                                    ('product_id.categ_id','in',tuple(category_list_ids))])

subtotal = 0.0
if invoice_line_ids:
    cr.execute("select sum(price_subtotal) from account_invoice_line where id in %s" ,(tuple(invoice_line_ids),))
    subtotal = cr.fetchall()[0][0]

vendedores = user_obj.search(cr, uid, [('parameters_id','=',self_br.nominal_ref_id.id)])

sales_number = len(vendedores)
total_comission = 0.0
if subtotal > 0.0:
    total_comission = subtotal*(self_br.percentage/100)

temporal_results_nominal = self.pool.get('temporal.results.nominal')
temporal_id = temporal_results_nominal.create(cr, uid, {
                                                    'result_python_code': total_comission,
                                                    'nominal_id': self_br.id,
                                                    'date': datetime.now().strftime('%Y-%m-%d'),
                                                    'name': self_br.detail_comission,}, context=None)</field>
        </record>

        <record id="com_nominal_lines_divs_02" model="nominal.lines.model">
            <field name="nominal_ref_id" ref="calculate_comissions_04"/>
            <field name="name" >El Porcentaje es  sobre la utilidad de ventas de Refrigeración de sucursales TyP sin IVA Refrigeracion.</field>
            <field name="margin_percentage_initial">0.0</field>
            <field name="margin_percentage_final">0.0</field>
            <field name="percentage" >2</field>
            <field name="final_day" >0</field>
            <field name="general" >True</field>
            <field name="special_calculate" >True</field>
            <field name="detail_comission" >Comision sobre la utilidad de ventas de Refrigeración de sucursales TyP.</field>
            <field name="python_code" >############### GERENTE DE SUCURSAL #############
############ FUNCION DE COMISIONES 0.4% #########
product_category = self.pool.get('product.category')

invoice_line = self.pool.get("account.invoice.line")
invoice_obj = self.pool.get('account.invoice')
user_obj = self.pool.get("res.users")

user_br = user_obj.browse(cr, uid, salesman_id, context=None)
self_br = self.browse(cr, uid, ids[0], context=None)
account_invoice_parent_ids = account_invoice_parent_ids
company_ids = []

if self_br.nominal_ref_id.company_nominal_ids:
    company_ids = [x.id for x in self_br.nominal_ref_id.company_nominal_ids]

###################### COMPANYS IDS >>>>>> company_ids

#invoice_ids = invoice_obj.search(cr, uid, [('company_id','=',user_br.company_id.id),('id','in',tuple(account_invoice_parent_ids))])
invoice_ids = invoice_obj.search(cr, uid, [('company_id','in',tuple(company_ids)),
                                           ('type','=','out_invoice'),
                                           ('residual','&lt;=',0.0),
                                           ('state','in',('paid','open')),
                                           ('date_payment_real','&gt;=',date_start),
                                           ('date_payment_real','&lt;=',date_end)])


category_list_ids = [x.id for x in self_br.product_category_ids]

category_parent_ids = product_category.search(cr, SUPERUSER_ID, [
                                                                    ('parent_id','in',tuple(category_list_ids))
                                                                        ])
if category_parent_ids:
    category_parent_2_ids = product_category.search(cr, SUPERUSER_ID, [
                                                    ('parent_id','in',tuple(category_parent_ids))
                                                        ])
category_list_ids = category_list_ids + category_parent_ids + category_parent_2_ids

#invoice_ids = invoice_obj.search(cr, uid, [('user_id','=',user),('id','in',tuple(account_invoice_parent_ids))])
if self_br.margin_percentage_initial == 0.0 and self_br.margin_percentage_final == 0.0:
    invoice_line_ids = invoice_line.search(cr, uid, [('invoice_id','in', tuple(invoice_ids)),
                                                    ('product_id','!=',False)])
    invoice_line_ids = invoice_line.search(cr, uid, [('id','in', tuple(invoice_line_ids)),
                                                    ('product_id.categ_id','in',tuple(category_list_ids))])
else:
    ########## SI LE PONEN MARGEN AL CALCULO ESPECIAL ENTONCES PONER EL MARGEN MINIMO
    invoice_line_ids = invoice_line.search(cr, uid, [('invoice_id','in', tuple(invoice_ids)),
                                                    ('product_id','!=',False),('margin_percentage','&gt;=',self_br.margin_percentage_initial)])
    invoice_line_ids = invoice_line.search(cr, uid, [('id','in', tuple(invoice_line_ids)),
                                                    ('product_id.categ_id','in',tuple(category_list_ids))])

subtotal = 0.0
if invoice_line_ids:
    cr.execute("select sum(price_subtotal) from account_invoice_line where id in %s" ,(tuple(invoice_line_ids),))
    subtotal = cr.fetchall()[0][0]

vendedores = user_obj.search(cr, uid, [('parameters_id','=',self_br.nominal_ref_id.id)])

sales_number = len(vendedores)
total_comission = 0.0
if subtotal > 0.0:
    total_comission = subtotal*(self_br.percentage/100)

temporal_results_nominal = self.pool.get('temporal.results.nominal')
temporal_id = temporal_results_nominal.create(cr, uid, {
                                                    'result_python_code': total_comission,
                                                    'nominal_id': self_br.id,
                                                    'date': datetime.now().strftime('%Y-%m-%d'),
                                                    'name': self_br.detail_comission,}, context=None)</field>
        </record>

        <record id="com_nominal_lines_divs_03" model="nominal.lines.model">
            <field name="nominal_ref_id" ref="calculate_comissions_04"/>
            <field name="name" >Sobre el total de ventas de Refrigeración de Cedis TyP sin IVA con márgenes mayores o iguales 20% Refrigeracion</field>
            <field name="margin_percentage_initial">21</field>
            <field name="margin_percentage_final">0</field>
            <field name="percentage" >2</field>
            <field name="final_day" >0</field>
        </record>

        <record id="com_nominal_lines_divs_04" model="nominal.lines.model">
            <field name="nominal_ref_id" ref="calculate_comissions_04"/>
            <field name="name" >Sobre el total de ventas de Refrigeración de Cedis TyP sin IVA con márgenes mayores o iguales al 15% y menores al 20% Refrigeracion</field>
            <field name="margin_percentage_initial">16</field>
            <field name="margin_percentage_final">20</field>
            <field name="percentage" >1.5</field>
            <field name="final_day" >0</field>
        </record>

        <record id="com_nominal_lines_divs_05" model="nominal.lines.model">
            <field name="nominal_ref_id" ref="calculate_comissions_04"/>
            <field name="name" >Sobre el total de ventas de Refrigeración de Cedis TyP sin IVA con márgenes mayores o iguales al 10% y menores al 15% Refrigeracion</field>
            <field name="margin_percentage_initial">10</field>
            <field name="margin_percentage_final">15</field>
            <field name="percentage" >1</field>
            <field name="final_day" >0</field>
        </record>


    </data>
</openerp>
